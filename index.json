[{"content":" This project was built during Hack the North 2023 - check out our Devpost for all the details! Below is a conversation between us and Steve - another Hack the North participant. Notice the two main points: we summarize the conversation and also suggest future speaking points!\nInspiration # In the fast-paced world of networking and professional growth, connecting with students, peers, mentors, and like-minded individuals is essential. However, the need to manually jot down notes in Excel or the risk of missing out on valuable follow-up opportunities can be a real hindrance.\nWhat it does # Coffee Chat Copilot transcribes, summarizes, and suggests talking points for your conversations, eliminating manual note-taking and maximizing networking efficiency. Also able to take forms with genesys.\nHow we built it # Backend: # Cohere was used for both text summarization and text generation using their latest Coral model AssemblyAI was used for speech-to-text transcription and speaker diarization (i.e. identifying who is talking) Python + FastAPI was used to serve HTTP requests CockroachDB was used to store user and conversation data Frontend: # We used Next.js for its frontend capabilities Challenges we ran into # We ran into a few of the classic problems - going in circles about what idea we wanted to implement, biting off more than we can chew with scope creep and some technical challenges that seem like they should be simple (such as sending an audio file as a blob to our backend ðŸ˜’).\nAccomplishments that we\u0026rsquo;re proud of # A huge last minute push to get us over the finish line.\nWhat we learned # We learned some new technologies like working with LLMs at the API level, navigating heavily asynchronous tasks and using event-driven patterns like webhooks. Aside of technologies, we learned how to disagree but move forwards, when to cut our losses and how to leverage each others strengths!\nWhat\u0026rsquo;s next for Coffee Chat Copilot # There\u0026rsquo;s quite a few things on the horizon to look forwards to:\nAdding sentiment analysis Allow the user to augment the summary and the prompts that get generated Fleshing out the user structure and platform (adding authentication, onboarding more users) Using smart glasses to take pictures and recognize previous people you\u0026rsquo;ve met before ","date":"7 September 2023","permalink":"/projects/coffee-chat-copilot/","section":"projects","summary":"This project was built during Hack the North 2023 - check out our Devpost for all the details!","title":"Coffee Chat Copilot"},{"content":" Check out the code on Github or play the game for yourself here! A webgame where the user guesses which article of designer clothing is more expensive.\nLearning objectives # I set off on developing this project to meet a few goals:\nChallenge myself to complete and deploy a project end-to-end by myself Learn how to use Next.js with TypeScript and Tailwind CSS Learn how to take feedback on my own work to make it better Technologies used # Technology Description MongoDB a NoSQL database used to store our products Next.js a React framework used to develop the frontend + backend and used to deploy the application Tailwind CSS a CSS framework used to style the frontend TypeScript a superset of JavaScript that adds static types How does it work # Backend # On page load, a few products are randomly fetched from our MongoDB database into a list. To improve performance, subsequent products are periodically fetched in the background as the user gets more correct answers.\nFrontend # Two cards are initially displayed side-by-side on the screen, when the user correctly selects the more expensive product we increment the state of a counter variable. This setState operation slides down along our product array and re-renders the next product. When you incorrectly select a product, the Gameover screen shows and places all products[0...n] into a carousel.\nWe have the ability to restart the game over again by calling our startGame function:\nconst startGame = (productAPISuffix: string) =\u0026gt; { setIsLoading(true); fetchProducts(productAPISuffix).then(() =\u0026gt; { setGameType(productAPISuffix); setScore((prevScore) =\u0026gt; ({ currentScore: 0, hiScore: prevScore.hiScore, })); setIsGameOver(false); setIsLoading(false); }); }; ","date":"5 May 2023","permalink":"/projects/higher-or-lower/","section":"projects","summary":"Check out the code on Github or play the game for yourself here!","title":"Higher or Lower?"},{"content":" Check out the code on Github or play the game for yourself here! A minimalistic typing challenge featuring various typing modes and a global leaderboard.\nLearning objectives # I set off on developing this project to meet a few goals:\nLearn how to collaborate with others to complete a project Learn how to use the MERN stack Deploy a project into the wild Technologies used # Technology Description MongoDB a NoSQL database used to store our text for the challenges and the highscores Express a minimalist web framework for Node.js that helps us get the HTTP server up and running React our frontend library Node.js our backend server environment How does it work # Backend # Text is fetched randomly via REST from our MongoDB database - this includes Wikipedia articles, words from the English dictionary or quotes.\nWhen a user\u0026rsquo;s score (either time-based or words-per-minute-based) enters the top-10, they are prompted to enter their name on the global leaderboard. This is saved back to our database, and older values are pruned.\nFrontend # Text is fetched can begin typing. We have an event handler that triggers the timer to start recording as soon as a keystroke is pressed, and we regularly push the current time-stamp in order to calculate the user\u0026rsquo;s wpm over time.\nconst handleKeyPress = (event) =\u0026gt; { if (!timer.startTime) { timer.startTime = performance.now(); setStartCountdownTimer(true); } setUserText(event.target.value); if (event.target.value === quoteObj.array[quoteObj.currIndex]) { timeSplits.push(performance.now()); quoteObj.currIndex++; setUserText(\u0026#34;\u0026#34;); if (quoteObj.currIndex \u0026gt;= quoteObj.array.length) { onFinish(); } } }; The user actually types into a focused-state user input box, while the text shown on screen is rendered from a few parts:\nThe correct text so far (shown in blue) Any incorrect text so far (shown in red) The remaining text is shown in black These are calculated by comparing what is in the input box against the original string. Furthermore, we prevent users\u0026rsquo; from backspacing too far by saving fully correct words in a separate array.\n","date":"15 January 2022","permalink":"/projects/not-type-racer/","section":"projects","summary":"Check out the code on Github or play the game for yourself here!","title":"Not-TypeRacer"},{"content":" Check out the code on Github! The hosted service is down because it was costing money to maintain ðŸ¥². A Java Swing implementation of the popular game Codenames.\nLearning objectives # This project was originally a school assignment to create a Java Swing application - I figured why not try to host this online. This endeavor turned out to be not as simple as I initially thought, and I ended up utilizing the tools below to make it happen (and reading through A LOT of documentation).\nTechnologies used # Technology Description Webswing a web server that allows you to run any Java Swing application inside your web browser, using only pure HTML5 NGINX a reverse proxy that points internet requests to the local WebSwing application AWS EC2 the server that hosts the above two services ","date":"15 February 2022","permalink":"/projects/codenames/","section":"projects","summary":"Check out the code on Github!","title":"Codenames"},{"content":" Check out the code on Github! Converts Synthesia videos to sheet music.\nDemo # Learning objectives # The story behind this project is that both myself and a friend were interested in the field of Computer Science; however, neither of us knew the first thing about coding. This was the very first project we worked on to see if we had the motivation to learn a new skill on our own time.\nAttempt to learn a programming language (Python) through online resources Share the knowledge we\u0026rsquo;ve learned and encourage each other Wrap up a project together - unfortunately, we got as far as detecting the notes, as seen in the .gif above! Determine whether or not this is a career we could see ourselves pursuing - the answer to this is an emphatic YES Technologies used # Technology Description Python used in conjunction with Jupyter to develop the script OpenCV an open-source library with many computer vision tools that were helpful in detecting the keyboard notes being played How does it work # As MIDI keyboards are capable of exporting key presses to Synthesia in a very systematic manner, we can use this to detect which keys are being played, and when.\n1. The video output is consistently ordered\nThere are 52 white keys and 36 black keys on a standard piano.\n2. The key portion can be extracted\nWe can crop and threshold the image to identify the keys.\n3. We can run detection algorithms on the thresholded image\nCheck out this GIF that highlights the detected black keys. This can be similarly performed for the white keys.\n4. From any image, we can perform the same thresholding\nSide-by-side comparison of the raw image and thesholded image.\n5. Fully connected notes need to be segmented\nThis image shows two distinctly coloured notes that can be thresholded by using a histogram and identifying the peak.\nThe result is:\n6. And the full detection run on the image\n7. Perform this on every frame of the video\nCheck out the .gif above\n","date":"3 May 2021","permalink":"/projects/piano2sheet/","section":"projects","summary":"Check out the code on Github!","title":"piano2sheet"},{"content":"Hello there! My name is Brian - I\u0026rsquo;m a student at the University of British Columbia pursuing my second degree in Computer Science. I was most recently an intern on the Integrations team at Procurify.\n","date":null,"permalink":"/","section":"Brian Vu","summary":"Hello there!","title":"Brian Vu"},{"content":"","date":null,"permalink":"/projects/","section":"projects","summary":"","title":"projects"},{"content":"I am a second-degree student studying Computer Science at the University of British Columbia. I love learning about and crafting elegant solutions to complex problems, collaborating in cross-functional teams, and seeing my work have a real-world impact.\nIn my present role as a Software Engineering Co-op Student, I actively contribute to both the frontend and backend of our tech stack, transforming business and product ideas into engineering solutions.\nMy first degree was in Mechanical Engineering, and prior to my switch to the software industry I was putting out fires working as a management consultant. I\u0026rsquo;m happy to be back to my technical roots and am eager to continue growing and learning each day.\nOutside of work and school I\u0026rsquo;m an avid foodie, I keep active through weightlifting and cycling, and I\u0026rsquo;m patiently waiting for Elder Scrolls VI to release.\n","date":null,"permalink":"/about/","section":"Brian Vu","summary":"I am a second-degree student studying Computer Science at the University of British Columbia.","title":"about me"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":" ðŸš§ Under construction ðŸš§ Download resume as .pdf ","date":null,"permalink":"/cv/","section":"Brian Vu","summary":"ðŸš§ Under construction ðŸš§ Download resume as .","title":"cv"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]